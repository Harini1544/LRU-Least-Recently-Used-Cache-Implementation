class Node:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.prev = None
        self.next = None

class LRUCache:
    def __init__(self, capacity):
        self.capacity = capacity
        self.cache = {}  # Map keys to nodes
        self.head = Node(0, 0)  # Dummy head
        self.tail = Node(0, 0)  # Dummy tail
        self.head.next = self.tail
        self.tail.prev = self.head

    def _remove(self, node):
        """Remove a node from the doubly linked list"""
        prev = node.prev
        next = node.next
        prev.next = next
        next.prev = prev

    def _add(self, node):
        """Add a node to the front (right after head)"""
        next = self.head.next
        self.head.next = node
        node.prev = self.head
        node.next = next
        next.prev = node

    def get(self, key):
        if key in self.cache:
            node = self.cache[key]
            self._remove(node)
            self._add(node)  # Move node to the front
            return node.value
        return -1  # Key not found

    def put(self, key, value):
        if key in self.cache:
            self._remove(self.cache[key])
        node = Node(key, value)
        self._add(node)
        self.cache[key] = node

        if len(self.cache) > self.capacity:
            # Remove the least recently used (node before tail)
            lru = self.tail.prev
            self._remove(lru)
            del self.cache[lru.key]

# Test the LRU Cache
def main():
    lru = LRUCache(2)  # Capacity of 2
    lru.put(1, 1)
    lru.put(2, 2)
    print(lru.get(1))  # Returns 1
    lru.put(3, 3)  # Removes key 2, because it's least recently used
    print(lru.get(2))  # Returns -1 (not found)
    lru.put(4, 4)  # Removes key 1
    print(lru.get(1))  # Returns -1 (not found)
    print(lru.get(3))  # Returns 3
    print(lru.get(4))  # Returns 4

if __name__ == "__main__":
    main()
